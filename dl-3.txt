import numpy as np

# Dataset
X = np.array([
    [2, 1],
    [3, 2],
    [4, 3],
    [5, 4]
])
Y = np.array([0, 0, 1, 1])

learning_rate = 0.1
n_iterations = 10
X = np.hstack((np.ones((X.shape[0], 1)), X))
weights = np.zeros(X.shape[1])

for _ in range(n_iterations):
    for i in range(X.shape[0]):
        linear_output = np.dot(X[i], weights)  
        predicted_label = 1 if linear_output >= 0 else 0
        weights += learning_rate * (Y[i] - predicted_label) * X[i]

print(f"Final weights: {weights}")
def predict(X):
    X = np.hstack((np.ones((X.shape[0], 1)), X))
    linear_output = np.dot(X, weights)
    return np.where(linear_output >= 0, 1, 0)

new_data = np.array([[4, 2]])
prediction = predict(new_data)
print(f"Prediction for {new_data}: {prediction}")

predictions = predict(X[:, 1:])
print(f"Predictions on training data: {predictions}")
print(f"Actual labels: {Y}")
 